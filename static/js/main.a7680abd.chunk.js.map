{"version":3,"sources":["components/NavTabs.js","components/pages/About.jsx","components/pages/Discover.jsx","components/pages/Search.jsx","App.js","serviceWorker.js","index.js"],"names":["NavTabs","location","useLocation","className","to","pathname","About","Discover","state","result","discoverPups","query","axios","get","then","response","console","log","data","message","setState","catch","err","this","src","Component","Search","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"iMAoCeA,MAjCf,WAIE,IAAMC,EAAWC,cAEjB,OACE,wBAAIC,UAAU,gBACZ,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAiC,MAAtBF,EAASI,SAAmB,kBAAoB,YAAxE,UAIF,wBAAIF,UAAU,YACZ,kBAAC,IAAD,CACEC,GAAG,YACHD,UAAiC,cAAtBF,EAASI,SAA2B,kBAAoB,YAFrE,aAOF,wBAAIF,UAAU,YACZ,kBAAC,IAAD,CACEC,GAAG,UACHD,UAAiC,YAAtBF,EAASI,SAAyB,kBAAoB,YAFnE,aCPOC,EAhBD,WACV,OACI,6BACI,yBAAKH,UAAS,YACV,yBAAKA,UAAS,OACV,yBAAKA,UAAS,OACV,uBAAGA,UAAW,aAAd,2B,iDCqCTI,E,4MAzCXC,MAAQ,CACJC,OAAQ,I,EAQZC,aAAe,SAACC,GAEZC,IAAMC,IADU,2CAEXC,MAAK,SAACC,GACHC,QAAQC,IAAIF,EAASG,KAAKC,SAC1B,EAAKC,SAAS,CAAEX,OAAQM,EAASG,KAAKC,aAEzCE,OAAM,SAACC,GACJN,QAAQC,IAAIK,O,kEAXpBC,KAAKb,iB,+BAiBL,OACI,6BACI,yBAAKP,UAAW,aACZ,yBAAKA,UAAW,OACZ,yBAAKA,UAAW,OACXoB,KAAKf,MAAMC,QACR,yBAAKe,IAAKD,KAAKf,MAAMC,SAGzB,qD,GAjCLgB,aCSRC,E,uKARP,OACI,6BACI,kD,GAJKD,aCmBNE,MAdf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,6BACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWxB,IACjC,kBAAC,IAAD,CAAOsB,OAAK,EAACC,KAAK,YAAYC,UAAWvB,IACzC,kBAAC,IAAD,CAAOqB,OAAK,EAACC,KAAK,UAAUC,UAAWJ,OCF3BK,QACW,cAA7BC,OAAO/B,SAASgC,UAEe,UAA7BD,OAAO/B,SAASgC,UAEhBD,OAAO/B,SAASgC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdvB,OAAM,SAAAwB,GACL7B,QAAQ6B,MAAMA,EAAM1B,c","file":"static/js/main.a7680abd.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\n\nfunction NavTabs() {\n  // We'll go into the Hooks API later, for now, we are just using some code\n  // from the react-router docs (https://reacttraining.com/react-router/web/api/Hooks/uselocation)\n  // This allows the component to check the route any time the user uses a link to navigate.\n  const location = useLocation();\n\n  return (\n    <ul className=\"nav nav-tabs\">\n      <li className=\"nav-item\">\n        <Link to=\"/\" className={location.pathname === \"/\" ? \"nav-link active\" : \"nav-link\"}>\n          About\n        </Link>\n      </li>\n      <li className=\"nav-item\">\n        <Link\n          to=\"/discover\"\n          className={location.pathname === \"/discover\" ? \"nav-link active\" : \"nav-link\"}\n        >\n          Discover\n        </Link>\n      </li>\n      <li className=\"nav-item\">\n        <Link\n          to=\"/search\"\n          className={location.pathname === \"/search\" ? \"nav-link active\" : \"nav-link\"}\n        >\n          Search\n        </Link>\n      </li>\n    </ul>\n  );\n}\n\nexport default NavTabs;\n","import React from 'react';\n\nconst About = () => {\n    return (\n        <div>\n            <div className={`containr`}>\n                <div className={`row`}>\n                    <div className={`col`}>\n                        <p className={\"texCenter\"}>Welcome to Pupster</p>\n\n                    </div>\n                </div>\n            </div>\n            \n        </div>\n    );\n};\n\nexport default About;","import React, { Component } from 'react';\nimport axios from \"axios\";\n\nclass Discover extends Component {\n    state = {\n        result: \"\"\n    };\n\n    // When this component mounts, search the Giphy API for pictures of kittens\n    componentDidMount() {\n        this.discoverPups();\n    }\n\n    discoverPups = (query) => {\n        const BASEURL = \"https://dog.ceo/api/breeds/image/random\";\n        axios.get(BASEURL)\n            .then((response) => {\n                console.log(response.data.message);\n                this.setState({ result: response.data.message })\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    };\n\n\n    render() {\n        return (\n            <div>\n                <div className={\"container\"}>\n                    <div className={\"row\"}>\n                        <div className={\"col\"}>\n                            {this.state.result && (\n                                <img src={this.state.result} />\n\n                            )}\n                            <button>thumbs up</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Discover;","import React, { Component } from 'react';\n\nclass Search extends Component {\n    render() {\n        return (\n            <div>\n                <p>this is search</p>\n            </div>\n        );\n    }\n}\n\nexport default Search;","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport NavTabs from \"./components/NavTabs\";\nimport About from './components/pages/About';\nimport Discover from './components/pages/Discover';\nimport Search from './components/pages/Search';\n\nfunction App() {\n  return (\n    <Router>\n      <NavTabs />\n      <div>\n        <Route exact path=\"/\" component={About} />\n        <Route exact path=\"/discover\" component={Discover} />\n        <Route exact path=\"/search\" component={Search} />\n      </div>\n    </Router>\n  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}